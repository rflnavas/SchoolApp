<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
" xmlns:mvc="http://www.springframework.org/schema/mvc">
    
    <bean id="propertyConfigurer" 
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>hibernate/database.properties</value>
            </list>
        </property>
    </bean>
    <!--We provide information to dataSource from the locations of propertyConfigurer. 
        As we have a single properties file, the info comes from database.properties 
        which has, for instance, the jdbc.user
    -->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource"
        p:driverClassName="${jdbc.driverClassName}"
        p:url="${jdbc.url}"
        p:username="${jdbc.user}"
        p:password="${jdbc.password}">
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
       <property name="dataSource" ref="dataSource"/>
       <property name="configLocation">
           <value>classpath:hibernate/hibernate.cfg.xml</value>
       </property>
       <property name="hibernateProperties">
           <props>
               <!--See http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/configuration.html-->
               <!--http://hibernate.org/validator/
                    Express validation rules from transparent integration with a wide 
                    variety of frameworks
               -->
               <prop key="javax.persistence.validation.mode">none</prop>
               <prop key="hbm2ddl.auto">validate</prop>
           </props>
       </property>
      
    </bean>
    <!--We musnt't forget the transaction manager as we need to create 
        transactions to use Query or Criteria Hibernate objects in our DAOs.
        Spring will handle the transactions for us
    
        WARNING!
        Setting hibernate.current_session_context_class in hibernate.cfg.xml
        effectively disables Spring transaction management
        In fact we could deal with this problem:
            "createQuery is not valid without active transaction"
        
        For further details see:
        http://docs.spring.io/spring/docs/3.0.x/javadoc-api/org/springframework/orm/hibernate3/AbstractSessionFactoryBean.html#setExposeTransactionAwareSessionFactory(boolean)
    -->
     <tx:annotation-driven/>  
     <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
         <property name="sessionFactory" ref="sessionFactory"/>
     </bean>
</beans>
